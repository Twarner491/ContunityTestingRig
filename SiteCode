#sources:
#https://www.raspberrypi.com/news/how-to-run-a-webserver-on-raspberry-pi-pico-w/
#https://www.tomshardware.com/how-to/raspberry-pi-pico-w-web-server


#todo
#set up hardware button for launch site
#set up html template
#set up svg file template with text

#add -1 case for getHeaderFormat (header file incorrectly formatted, push error to site)
#add -2 case for getHeaderFormat (no file found, push error to site)
#add returns 0 confirmation for getHeaderFormat

#run checkPinout() differently based on numPins from headerformat

#add -2 case for getSVGFormat (no format file found)
#add returns 0 confirmation for getSVGFormat

#implement <g> group header to add text labels to svg pin objects
#determine if header config file is necessary, do they want a specific config for each header type?

import rp2
from machine import Pin
import utime

import socket
import network


ssid = 'NETWORK NAME'
password = 'NETWORK PASSWORD'



bool hasBeenSetup = false


setup()
def main():
    if(hardware button pressed && !hasBeenSetup)
    connect()
    updateSite()

def getSVGFormat():
    with open("pin.svg","r") as file:
        svgfile = file.read()
        file.close()
        reformat = svgfile.split('\n')
        reformat = reformat[1] + reformat[2] + reformat[3] #pull the specific lines
        reformat = svgfile.split("#") #rewrite color code
        global svgpins = []
        for i in range(len(colors)):
            if(colors[i] == "EMPTY"):
                svgpins.append(reformat[0] + "#" + reformat[1])
            else:
                color = "#" + colors[i]
                svgpins.append(reformat[0] + color + reformat[1][3:])
        return 0
    return -2
 



def getHeaderFormat():
    with open("headerformat.txt", "r") as file: #basically a try catch loop
        headerlist = file.read() #read headerformat text file
        file.close()
        headerlist = headerlist.split('\n')[0] #take first line only
        split = headerlist.split(' ') #split by space
        if(int(len(split[1]))!= int(split[0])): #check if the format is correct, else ask to reformat
            print("Missing pin colors, add 'EMPTY' for a disconnected pin in the header")
            return -1 #incorrect header format error case
        global colors = split[1][1:(len(split[1])-1)].split(',') #colors list is set to the colors defined in the format file
        global numPins = split[0] #numPins is the number of output pins necessary
        return 0
    return -2 #no file error case

 
def updateSite():   
    page = open("index.html","r")
    html = page.read()
    page.close()
    addr = socket.getaddrinfo('0.0.0.0', 80)[0][-1]
    s = socket.socket()
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind(addr)
    s.listen(1)
    while True:
        cl, addr = s.accept()
        print('client connected from', addr)
        cl_file = cl.makefile('rwb', 0)
        pinoutList = checkPinout()[1]
        rows = []
        for i in range(len(pinoutList[0])):
            pinoutStr = "Pin " + str(pinoutList[0][i]) + " --> Pin " + str(pinoutList[1][i])
            rows.append('<body> <br> %s </br> </body>' % pinoutStr)
        while True:
            line = cl_file.readline()
            if not line or line == b'\r\n':
                break
    #    rows = '<body> %s </body>' % pinoutStr
        response = html
        for i in range(len(rows)):
            response += rows[i]
        cl.send('HTTP/1.0 200 OK\r\nContent-type: text/html\r\n\r\n')
        cl.send(response)
        cl.close() 

def networkConnect():
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    wlan.connect(ssid, password)
    # Wait for connect or fail
    max_wait = 15
    while max_wait > 0:
      if wlan.status() < 0 or wlan.status() >= 3:
        break
      max_wait -= 1
      print('waiting for connection...')
      utime.sleep(1)
    # Handle connection error
    if wlan.status() != 3:
       raise RuntimeError('network connection failed')
    else:
      print('connected')
      status = wlan.ifconfig()
      print( 'ip = ' + status[0] )
      
def connect():
    addr = socket.getaddrinfo('0.0.0.0', 80)[0][-1]
    s = socket.socket()
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind(addr)
    s.listen(1)
    print('listening on', addr)


def setup(): #pin setup
    #gpio pin numbers
    inPinNums = [2,3,4,5]
    outPinNums = [6,7,8,9,10,11,12,13,14]
    #create and fill arrays of pin objects, pinout array
    inputPins = []
    outputPins = []
    for i in range(len(inPinNums)):
        inputPins.append(Pin(inPinNums[i], Pin.IN)) #fill input pin object array with new pin object
    for i in range(len(outPinNums)):
        outputPins.append(Pin(outPinNums[i], Pin.OUT))
        outputPins[i].value(0) #default value
    connectNetwork()

def checkPinout(numofPins):
    pinout = [[],[]]
    for i in range(len(outputPins)):
        pinout[0].append(i+1) #start building pinout array
    r = "Pinout:"
    #String to return
    for i in range(len(outputPins)):
        try:
            outputPins[i].value(1) #set pin to high
        except:
            utime.sleep(0.01)
        utime.sleep(0.01)
        p1 = inputPins[0].value()
        p2 = inputPins[1].value()
        p3 = inputPins[2].value()
        p4 = inputPins[3].value() #read input pin value (high = 1, low = 0)
        try:
            outputPins[i].value(0) #reset pin to low
        except:
            utime.sleep(0.01)
        pin = bin2num(p1,p2,p3,p4)
        pinout[1].append(pin) #set pinout pin to binary equivalent of inputs
        r += "Pin " + str(i) + " --> Pin " + str(pin) + '\n' #build string equivalent to array (display purposes)
    return [r,pinout]

def bin2num(a, b, c, d):
    z = a
    z += b << 1
    z += c << 2
    z += d << 3
    #add the equivalent value of the bit
    return z
    #return the equivalent pin value
